package com.markmburu.interview.urlshortener.service;

import com.markmburu.interview.urlshortener.dto.OriginalUrl;
import com.markmburu.interview.urlshortener.utils.ConvertUtils;
import com.markmburu.interview.urlshortener.dto.ShortenedUrl;
import com.markmburu.interview.urlshortener.model.ShortenUrlEntity;
import com.markmburu.interview.urlshortener.repository.ShortenUrlRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ShortenUrlService {

    Logger logger = LoggerFactory.getLogger(ShortenUrlService.class);

    private final ShortenUrlRepository shortenUrlRepository;

    @Autowired
    public ShortenUrlService(ShortenUrlRepository shortenUrlRepository) {
        this.shortenUrlRepository = shortenUrlRepository;
    }

    private ShortenUrlEntity get(Long id) {
        logger.info(String.format("Fetching Url from database for Id %d", id));
        ShortenUrlEntity shortenUrlEntity = shortenUrlRepository.findById(id).get();
        return shortenUrlEntity;
    }

    /**
     * Uses the Base62 encoded to convert to Base10 number and fetches the corresponding record from the database
     *
     * @param shortenString Base62 encoded string
     * @return OriginalUrl object
     */
    public OriginalUrl getFullUrl(String shortenString) {
        logger.debug("Converting Base 62 string %s to Base 10 id");
        Long id = ConvertUtils.strToId(shortenString);
        logger.info(String.format("Converted Base 62 string %s to Base 10 id %s", shortenString, id));

        logger.info(String.format("Retrieving full url for %d", id));
        return new OriginalUrl(this.get(id).getFullUrl());
    }

    private ShortenUrlEntity save(OriginalUrl originalUrl) {
        return shortenUrlRepository.save(new ShortenUrlEntity(originalUrl.getFullUrl()));
    }

    /**
     * It saves the full url to database and uses the autogenerated id to convert to Base62 string
     *
     * @param originalUrl OriginalUrl object to be converted to shortened url
     * @return ShortenedUrl object
     */
    public ShortenedUrl getShortUrl(OriginalUrl originalUrl) {

        logger.info("Checking if the url already exists");
        List<ShortenUrlEntity> savedUrls = null;
        savedUrls = checkFullUrlAlreadyExists(originalUrl);

        ShortenUrlEntity savedUrl = null;

        if (savedUrls.isEmpty()) {
            logger.info(String.format("Saving Url %s to database", originalUrl.getFullUrl()));
            savedUrl = this.save(originalUrl);
            logger.debug(savedUrl.toString());
        }
        else {
            savedUrl = savedUrls.get(0);
            logger.info(String.format("url: %s already exists in the database. skipped insert", savedUrl));
        }

        logger.debug(String.format("Converting Base 10 %d to Base 62 string", savedUrl.getId()));
        String shortUrlText = ConvertUtils.idToStr(savedUrl.getId());
        logger.info(String.format("Converted Base 10 %d to Base 62 string %s", savedUrl.getId(), shortUrlText));

        return new ShortenedUrl(shortUrlText);
    }

    /**
     * Check if Url already exists in the database to prevent having same url stored multiple times
     *
     * @param originalUrl
     * @return list of ShortenUrlEntity objects, list will be empty if no results found
     */
    private List<ShortenUrlEntity> checkFullUrlAlreadyExists(OriginalUrl originalUrl) {
        return shortenUrlRepository.findUrlByFullUrl(originalUrl.getFullUrl());
    }
}
